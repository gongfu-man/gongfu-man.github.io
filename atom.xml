<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烧鸡翼我钟意食</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-20T10:39:32.434Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>304-5床</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow-Quantum</title>
    <link href="http://example.com/2022/01/20/tensorflow-Quantum-0/"/>
    <id>http://example.com/2022/01/20/tensorflow-Quantum-0/</id>
    <published>2022-01-20T09:24:38.000Z</published>
    <updated>2022-02-20T10:39:32.434Z</updated>
    
    <content type="html"><![CDATA[<p>Tensorflow Quantum（TFQ）是一个量子机器学习，可以快速的设计出量子-经典机器学习混合模型的原型库。它集成在 量子计算算法和计算逻辑上，并提供了与现有的 TensorFlow API 接口的 TensorFlow 中的计算接口。</p><h4 id="1-安装Tensorflow-Quantum"><a href="#1-安装Tensorflow-Quantum" class="headerlink" title="1.安装Tensorflow Quantum"></a>1.安装Tensorflow Quantum</h4><p>要使用Tensorflow Quantum(TFQ),我这里推荐使用Anaconda prompt命令行进行安装：</p><h5 id="1-1-打开anaconda-prompt"><a href="#1-1-打开anaconda-prompt" class="headerlink" title="1.1 打开anaconda prompt"></a>1.1 打开anaconda prompt</h5><h6 id="1-1-1-升级pip并安装Tensorflow"><a href="#1-1-1-升级pip并安装Tensorflow" class="headerlink" title="1.1.1 升级pip并安装Tensorflow"></a>1.1.1 升级pip并安装Tensorflow</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip3 install tensorflow==2.1.0</span><br></pre></td></tr></table></figure><h6 id="1-1-2-在anaconda中创建新的环境-环境名字任意"><a href="#1-1-2-在anaconda中创建新的环境-环境名字任意" class="headerlink" title="1.1.2.在anaconda中创建新的环境(环境名字任意)"></a>1.1.2.在anaconda中创建新的环境(环境名字任意)</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name Quantum python=3.7</span><br></pre></td></tr></table></figure><h6 id="1-1-3-安装最新稳定版本的Tensorflow-Quantum"><a href="#1-1-3-安装最新稳定版本的Tensorflow-Quantum" class="headerlink" title="1.1.3 安装最新稳定版本的Tensorflow Quantum:"></a>1.1.3 安装最新稳定版本的Tensorflow Quantum:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U tensorflow-quantum</span><br></pre></td></tr></table></figure><p>等待一段时间后，Tensorflow Quantum构建完成。</p><h6 id="1-1-4-可选-安装最新Nightly版本的Tensorflow-Quantum"><a href="#1-1-4-可选-安装最新Nightly版本的Tensorflow-Quantum" class="headerlink" title="1.1.4(可选) 安装最新Nightly版本的Tensorflow Quantum:"></a>1.1.4(可选) 安装最新Nightly版本的Tensorflow Quantum:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U tfq-nightly</span><br></pre></td></tr></table></figure><h5 id="1-2-设置"><a href="#1-2-设置" class="headerlink" title="1.2 设置"></a>1.2 设置</h5><h6 id="1-2-1-激活环境并打开jupyter-notebook"><a href="#1-2-1-激活环境并打开jupyter-notebook" class="headerlink" title="1.2.1 激活环境并打开jupyter notebook"></a>1.2.1 激活环境并打开jupyter notebook</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">activate Quantum</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>输入指令后会出现一段网址，复制之后在本机打开就可以进行notebook的界面了。</p><h6 id="1-2-2-更新包资源"><a href="#1-2-2-更新包资源" class="headerlink" title="1.2.2 更新包资源"></a>1.2.2 更新包资源</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Update package resources to account for version changes.</span></span><br><span class="line"><span class="keyword">import</span> importlib, pkg_resources</span><br><span class="line">importlib.reload(pkg_resources)</span><br></pre></td></tr></table></figure><h6 id="1-2-3导入Tensorflow和模块依赖项"><a href="#1-2-3导入Tensorflow和模块依赖项" class="headerlink" title="1.2.3导入Tensorflow和模块依赖项"></a>1.2.3导入Tensorflow和模块依赖项</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow_quantum <span class="keyword">as</span> tfq</span><br><span class="line"><span class="keyword">import</span> cirq</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># visualization tools</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> cirq.contrib.svg <span class="keyword">import</span> SVGCircuit</span><br></pre></td></tr></table></figure><h4 id="2-实现量子卷积神经网络"><a href="#2-实现量子卷积神经网络" class="headerlink" title="2. 实现量子卷积神经网络"></a>2. 实现量子卷积神经网络</h4><h5 id="2-1-生成数据"><a href="#2-1-生成数据" class="headerlink" title="2.1 生成数据"></a>2.1 生成数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_data</span>(<span class="params">qubits</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate training and testing data.&quot;&quot;&quot;</span> </span><br><span class="line">    n_rounds = <span class="number">20</span>  <span class="comment"># Produces n_rounds * n_qubits datapoints.</span></span><br><span class="line">    excitations = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(n_rounds):</span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> qubits:</span><br><span class="line">            rng = np.random.uniform(-np.pi, np.pi)</span><br><span class="line">            excitations.append(cirq.Circuit(cirq.rx(rng)(bit)))</span><br><span class="line">            labels.append(<span class="number">1</span> <span class="keyword">if</span> (-np.pi / <span class="number">2</span>) &lt;= rng &lt;= (np.pi / <span class="number">2</span>) <span class="keyword">else</span> -<span class="number">1</span>)</span><br><span class="line">            split_ind = <span class="built_in">int</span>(<span class="built_in">len</span>(excitations) * <span class="number">0.7</span>)</span><br><span class="line">            train_excitations = excitations[:split_ind]</span><br><span class="line">            test_excitations = excitations[split_ind:]</span><br><span class="line">            train_labels = labels[:split_ind]</span><br><span class="line">            test_labels = labels[split_ind:]</span><br><span class="line">            <span class="keyword">return</span> tfq.convert_to_tensor(train_excitations), np.array(train_labels),\             tfq.convert_to_tensor(test_excitations), np.array(test_labels)</span><br></pre></td></tr></table></figure><p>这时候就创建了一个训练和测试集用于对模型进行基准测试，输入一下代码可以看到一些数据点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sample_points, sample_labels, _, __ = generate_data(cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Input:&#x27;</span>, tfq.from_tensor(sample_points)[<span class="number">0</span>], <span class="string">&#x27;Output:&#x27;</span>, sample_labels[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Input:&#x27;</span>, tfq.from_tensor(sample_points)[<span class="number">1</span>], <span class="string">&#x27;Output:&#x27;</span>, sample_labels[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h5 id="2-2-定义层"><a href="#2-2-定义层" class="headerlink" title="2.2 定义层"></a>2.2 定义层</h5><h6 id="2-2-1-集群状态"><a href="#2-2-1-集群状态" class="headerlink" title="2.2.1 集群状态"></a>2.2.1 集群状态</h6><p>使用Cirq定义集群状态，Criq是Google提供的用于编程量子电路的框架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cluster_state_circuit</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a cluster state on the qubits in `bits`.&quot;&quot;&quot;</span></span><br><span class="line">    circuit = cirq.Circuit()</span><br><span class="line">    circuit.append(cirq.H.on_each(bits))</span><br><span class="line">    <span class="keyword">for</span> this_bit, next_bit <span class="keyword">in</span> <span class="built_in">zip</span>(bits, bits[<span class="number">1</span>:] + [bits[<span class="number">0</span>]]):</span><br><span class="line">        circuit.append(cirq.CZ(this_bit, next_bit))</span><br><span class="line">        <span class="keyword">return</span> circuit</span><br></pre></td></tr></table></figure><p>显示一个矩形的簇状态的电路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVGCircuit(cluster_state_circuit(cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h6 id="2-2-1-QCNN层"><a href="#2-2-1-QCNN层" class="headerlink" title="2.2.1 QCNN层"></a>2.2.1 QCNN层</h6><p>定义模型的层，一般有两个先决条件</p><ul><li><p><a href="https://arxiv.org/abs/quant-ph/0507171">Tucci 论文</a>中的一和二量子比特参数化酉矩阵。</p></li><li><p>一个通用的参数化双量子比特池操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_qubit_unitary</span>(<span class="params">bit, symbols</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Make a Cirq circuit enacting a rotation of the bloch sphere about the X,</span></span><br><span class="line"><span class="string">    Y and Z axis, that depends on the values in `symbols`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> cirq.Circuit(</span><br><span class="line">        cirq.X(bit)**symbols[<span class="number">0</span>],</span><br><span class="line">        cirq.Y(bit)**symbols[<span class="number">1</span>],</span><br><span class="line">        cirq.Z(bit)**symbols[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_qubit_unitary</span>(<span class="params">bits, symbols</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Make a Cirq circuit that creates an arbitrary two qubit unitary.&quot;&quot;&quot;</span></span><br><span class="line">    circuit = cirq.Circuit()</span><br><span class="line">    circuit += one_qubit_unitary(bits[<span class="number">0</span>], symbols[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">    circuit += one_qubit_unitary(bits[<span class="number">1</span>], symbols[<span class="number">3</span>:<span class="number">6</span>])</span><br><span class="line">    circuit += [cirq.ZZ(*bits)**symbols[<span class="number">6</span>]]</span><br><span class="line">    circuit += [cirq.YY(*bits)**symbols[<span class="number">7</span>]]</span><br><span class="line">    circuit += [cirq.XX(*bits)**symbols[<span class="number">8</span>]]</span><br><span class="line">    circuit += one_qubit_unitary(bits[<span class="number">0</span>], symbols[<span class="number">9</span>:<span class="number">12</span>])</span><br><span class="line">    circuit += one_qubit_unitary(bits[<span class="number">1</span>], symbols[<span class="number">12</span>:])</span><br><span class="line">    <span class="keyword">return</span> circuit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_qubit_pool</span>(<span class="params">source_qubit, sink_qubit, symbols</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Make a Cirq circuit to do a parameterized &#x27;pooling&#x27; operation, which</span></span><br><span class="line"><span class="string">    attempts to reduce entanglement down from two qubits to just one.&quot;&quot;&quot;</span></span><br><span class="line">    pool_circuit = cirq.Circuit()</span><br><span class="line">    sink_basis_selector = one_qubit_unitary(sink_qubit, symbols[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">    source_basis_selector = one_qubit_unitary(source_qubit, symbols[<span class="number">3</span>:<span class="number">6</span>])</span><br><span class="line">    pool_circuit.append(sink_basis_selector)</span><br><span class="line">    pool_circuit.append(source_basis_selector)</span><br><span class="line">    pool_circuit.append(cirq.CNOT(control=source_qubit, target=sink_qubit))</span><br><span class="line">    pool_circuit.append(sink_basis_selector**-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> pool_circuit</span><br></pre></td></tr></table></figure></li></ul><p>可打印出单量子比特单位电路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVGCircuit(one_qubit_unitary(cirq.GridQubit(<span class="number">0</span>, <span class="number">0</span>), sympy.symbols(<span class="string">&#x27;x0:3&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>还有两个量子比特的单一电路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVGCircuit(two_qubit_unitary(cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">2</span>), sympy.symbols(<span class="string">&#x27;x0:15&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>以及两个量子比特池电路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVGCircuit(two_qubit_pool(*cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">2</span>), sympy.symbols(<span class="string">&#x27;x0:6&#x27;</span>)))</span><br></pre></td></tr></table></figure><h6 id="2-2-2-量子卷积"><a href="#2-2-2-量子卷积" class="headerlink" title="2.2.2 量子卷积"></a>2.2.2 量子卷积</h6><p> 科学家将1D 量子卷积定义为对每对步幅为 1 的相邻量子比特应用两量子比特参数化酉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantum_conv_circuit</span>(<span class="params">bits, symbols</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Quantum Convolution Layer following the above diagram.</span></span><br><span class="line"><span class="string">    Return a Cirq circuit with the cascade of `two_qubit_unitary` applied</span></span><br><span class="line"><span class="string">    to all pairs of qubits in `bits` as in the diagram above.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    circuit = cirq.Circuit()</span><br><span class="line">    <span class="keyword">for</span> first, second <span class="keyword">in</span> <span class="built_in">zip</span>(bits[<span class="number">0</span>::<span class="number">2</span>], bits[<span class="number">1</span>::<span class="number">2</span>]):</span><br><span class="line">        circuit += two_qubit_unitary([first, second], symbols)</span><br><span class="line">    <span class="keyword">for</span> first, second <span class="keyword">in</span> <span class="built_in">zip</span>(bits[<span class="number">1</span>::<span class="number">2</span>], bits[<span class="number">2</span>::<span class="number">2</span>] + [bits[<span class="number">0</span>]]):</span><br><span class="line">        circuit += two_qubit_unitary([first, second], symbols)</span><br><span class="line">    <span class="keyword">return</span> circuit</span><br></pre></td></tr></table></figure><p>显示非常水平的电路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVGCircuit(quantum_conv_circuit(cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">8</span>), sympy.symbols(<span class="string">&#x27;x0:15&#x27;</span>)))</span><br></pre></td></tr></table></figure><h6 id="2-2-3-量子池"><a href="#2-2-3-量子池" class="headerlink" title="2.2.3 量子池"></a>2.2.3 量子池</h6><p> 一个量子池化层从 N 量子比特 N/2 使用上面定义的双量子比特池的量子比特 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantum_pool_circuit</span>(<span class="params">source_bits, sink_bits, symbols</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A layer that specifies a quantum pooling operation.</span></span><br><span class="line"><span class="string">    A Quantum pool tries to learn to pool the relevant information from two</span></span><br><span class="line"><span class="string">    qubits onto 1.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    circuit = cirq.Circuit()</span><br><span class="line">    <span class="keyword">for</span> source, sink <span class="keyword">in</span> <span class="built_in">zip</span>(source_bits, sink_bits):</span><br><span class="line">        circuit += two_qubit_pool(source, sink, symbols)</span><br><span class="line">    <span class="keyword">return</span> circuit</span><br></pre></td></tr></table></figure><p>检查池化组件电路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_bits = cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">SVGCircuit(quantum_pool_circuit(test_bits[:<span class="number">4</span>], test_bits[<span class="number">4</span>:], sympy.symbols(<span class="string">&#x27;x0:6&#x27;</span>)))</span><br></pre></td></tr></table></figure><h5 id="2-3-模型定义"><a href="#2-3-模型定义" class="headerlink" title="2.3 模型定义"></a>2.3 模型定义</h5><p> 使用定义的层来构建一个纯量子 CNN。从 8 个量子位开始，汇集到 1 个，然后测量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model_circuit</span>(<span class="params">qubits</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create sequence of alternating convolution and pooling operators </span></span><br><span class="line"><span class="string">    which gradually shrink over time.&quot;&quot;&quot;</span></span><br><span class="line">    model_circuit = cirq.Circuit()</span><br><span class="line">    symbols = sympy.symbols(<span class="string">&#x27;qconv0:63&#x27;</span>)</span><br><span class="line">    <span class="comment"># Cirq uses sympy.Symbols to map learnable variables. TensorFlow Quantum</span></span><br><span class="line">    <span class="comment"># scans incoming circuits and replaces these with TensorFlow variables.</span></span><br><span class="line">    model_circuit += quantum_conv_circuit(qubits, symbols[<span class="number">0</span>:<span class="number">15</span>])</span><br><span class="line">    model_circuit += quantum_pool_circuit(qubits[:<span class="number">4</span>], qubits[<span class="number">4</span>:],</span><br><span class="line">                                          symbols[<span class="number">15</span>:<span class="number">21</span>])</span><br><span class="line">    model_circuit += quantum_conv_circuit(qubits[<span class="number">4</span>:], symbols[<span class="number">21</span>:<span class="number">36</span>])</span><br><span class="line">    model_circuit += quantum_pool_circuit(qubits[<span class="number">4</span>:<span class="number">6</span>], qubits[<span class="number">6</span>:],</span><br><span class="line">                                          symbols[<span class="number">36</span>:<span class="number">42</span>])</span><br><span class="line">    model_circuit += quantum_conv_circuit(qubits[<span class="number">6</span>:], symbols[<span class="number">42</span>:<span class="number">57</span>])</span><br><span class="line">    model_circuit += quantum_pool_circuit([qubits[<span class="number">6</span>]], [qubits[<span class="number">7</span>]],</span><br><span class="line">                                          symbols[<span class="number">57</span>:<span class="number">63</span>])</span><br><span class="line">    <span class="keyword">return</span> model_circuit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create our qubits and readout operators in Cirq.</span></span><br><span class="line">cluster_state_bits = cirq.GridQubit.rect(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">readout_operators = cirq.Z(cluster_state_bits[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a sequential model enacting the logic in 1.3 of this notebook.</span></span><br><span class="line"><span class="comment"># Here you are making the static cluster state prep as a part of the AddCircuit and the</span></span><br><span class="line"><span class="comment"># &quot;quantum datapoints&quot; are coming in the form of excitation</span></span><br><span class="line">excitation_input = tf.keras.Input(shape=(), dtype=tf.dtypes.string)</span><br><span class="line">cluster_state = tfq.layers.AddCircuit()(</span><br><span class="line">    excitation_input, prepend=cluster_state_circuit(cluster_state_bits))</span><br><span class="line"></span><br><span class="line">quantum_model = tfq.layers.PQC(create_model_circuit(cluster_state_bits),</span><br><span class="line">                               readout_operators)(cluster_state)</span><br><span class="line"></span><br><span class="line">qcnn_model = tf.keras.Model(inputs=[excitation_input], outputs=[quantum_model])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the keras plot of the model</span></span><br><span class="line">tf.keras.utils.plot_model(qcnn_model,</span><br><span class="line">                          show_shapes=<span class="literal">True</span>,</span><br><span class="line">                          show_layer_names=<span class="literal">False</span>,</span><br><span class="line">                          dpi=<span class="number">70</span>)</span><br></pre></td></tr></table></figure><p>注：这一步可能会报错，基本都是环境缺少的原因（比如Graphviz），缺什么就装什么就完了，运行出来是一个决策树。</p><h5 id="2-4-训练模型"><a href="#2-4-训练模型" class="headerlink" title="2.4 训练模型"></a>2.4 训练模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate some training data.</span></span><br><span class="line">train_excitations, train_labels, test_excitations, test_labels = generate_data(</span><br><span class="line">    cluster_state_bits)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom accuracy metric.</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_accuracy</span>(<span class="params">y_true, y_pred</span>):</span></span><br><span class="line">    y_true = tf.squeeze(y_true)</span><br><span class="line">    y_pred = tf.map_fn(<span class="keyword">lambda</span> x: <span class="number">1.0</span> <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> -<span class="number">1.0</span>, y_pred)</span><br><span class="line">    <span class="keyword">return</span> tf.keras.backend.mean(tf.keras.backend.equal(y_true, y_pred))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qcnn_model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(learning_rate=<span class="number">0.02</span>),</span><br><span class="line">                   loss=tf.losses.mse,</span><br><span class="line">                   metrics=[custom_accuracy])</span><br><span class="line"></span><br><span class="line">history = qcnn_model.fit(x=train_excitations,</span><br><span class="line">                         y=train_labels,</span><br><span class="line">                         batch_size=<span class="number">16</span>,</span><br><span class="line">                         epochs=<span class="number">25</span>,</span><br><span class="line">                         verbose=<span class="number">1</span>,</span><br><span class="line">                         validation_data=(test_excitations, test_labels))</span><br></pre></td></tr></table></figure><p>画出训练图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(history.history[<span class="string">&#x27;loss&#x27;</span>][<span class="number">1</span>:], label=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;val_loss&#x27;</span>][<span class="number">1</span>:], label=<span class="string">&#x27;Validation&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training a Quantum CNN to Detect Excited Cluster States&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tensorflow Quantum（TFQ）是一个量子机器学习，可以快速的设计出量子-经典机器学习混合模型的原型库。它集成在 量子计算算法和计算逻辑上，并提供了与现有的 TensorFlow API 接口的 TensorFlow 中的计算接口。&lt;/p&gt;
&lt;h4 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LSB最低有效位算法</title>
    <link href="http://example.com/2021/12/19/LSB%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/12/19/LSB%E7%AE%97%E6%B3%95/</id>
    <published>2021-12-18T16:32:37.000Z</published>
    <updated>2022-04-21T07:58:06.275Z</updated>
    
    <content type="html"><![CDATA[<p>LSB（Least Significant Bits）算法，全称为最低有效位算法，是利用载体对象的二进制的最低一位（或几位）来进行秘密信息的隐藏。LSB是数字水印中最常见的算法，多用于图像和声音载体之中。</p><h4 id="数字水印隐藏—-随机位嵌入法"><a href="#数字水印隐藏—-随机位嵌入法" class="headerlink" title="数字水印隐藏—-随机位嵌入法"></a>数字水印隐藏—-随机位嵌入法</h4><p>随机位嵌入算法是LSB算法的改进，其思想主要是利用随机数的大小来控制前后两个嵌入位的距离。比如我们得到一个长为<em>N</em>的服从<em>U</em>(0,1)的随机序列<em>R={r1,r2,…rN}</em>,<em>N</em>大于秘密信息的长度<em>L</em>。假设图片载体总像素点为<em>total</em>，要选择的像素点为<em>quantity</em>，则随机嵌入位的间隔定义为：</p><p>​                                                                 <em>k=[total/quantity]+1      (1)</em></p><p>通过判断相应的随机数rj与0.5进行大小比较，若大于0.5，则选择嵌入位Bi=rj,否则Bi=k-1。</p><p>随机位嵌入算法的间隔对存储信息容量的影响，具体表示如下：</p><p>​                                                                <em>C=W*H/S                      （2）</em></p><p>其中，<em>C</em>是存储信息的容量，也就是存储信息的长度。<em>W和</em>H<em>是原始图片的长和宽，</em>W*<em>H</em>是原始图片的大小，S是随机位嵌入算法的间隔。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;LSB（Least Significant Bits）算法，全称为最低有效位算法，是利用载体对象的二进制的最低一位（或几位）来进行秘密信息的隐藏。LSB是数字水印中最常见的算法，多用于图像和声音载体之中。&lt;/p&gt;
&lt;h4 id=&quot;数字水印隐藏—-随机位嵌入法&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
</feed>
